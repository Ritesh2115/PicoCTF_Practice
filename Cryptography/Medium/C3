PROBLEM STATEMENT : This is the Custom Cyclical Cipher! Download the ciphertext here. Download the encoder here. Enclose the flag in our wrapper for submission. If the flag was "example"
you would submit "picoCTF{example}".  

Ciphertext: DLSeGAGDgBNJDQJDCFSFnRBIDjgHoDFCFtHDgJpiHtGDmMAQFnRBJKkBAsTMrsPSDDnEFCFtIbEDtDCIbFCFtHTJDKerFldbFObFCFtLBFkBAAAPFnRBJGEkerFlcPgKkImHnIlATJDKbTbFOkdNnsgbnJRMFnRBNAFkBAAAbrcbTK
AkOgFpOgFpOpkBAAAAAAAiClFGIPFnRBaKliCgClFGtIBAAAAAAAOgGEkImHnIl
  
Here's the encoder code:  
import sys
chars = ""
from fileinput import input
for line in input():
    chars += line

lookup1 = "\n \"#()*+/1:=[]abcdefghijklmnopqrstuvwxyz"
lookup2 = "ABCDEFGHIJKLMNOPQRSTabcdefghijklmnopqrst"

out = ""
prev = 0
for char in chars:
    cur = lookup1.index(char)
    out += lookup2[(cur - prev) % 40]
    prev = cur

sys.stdout.write(out)

To decode the ciphertext, we need to reverse this process.

Decoding Logic:  
We reverse the encoding process by:
1. Mapping the ciphertext characters from "lookup2" back to "lookup1".
2. Iteratively computing the position using the cumulative transformation logic.

Here's the decoder:  
import sys

ciphertext = "DLSeGAGDgBNJDQJDCFSFnRBIDjgHoDFCFtHDgJpiHtGDmMAQFnRBJKkBAsTMrsPSDDnEFCFtIbEDtDCIbFCFtHTJDKerFldbFObFCFtLBFkBAAAPFnRBJGEkerFlcPgKkImHnIlATJDKbTbFOkdNnsgbnJRMFnRBNAFkBAAAbrcbTK
AkOgFpOgFpOpkBAAAAAAAiClFGIPFnRBaKliCgClFGtIBAAAAAAAOgGEkImHnIl"

lookup1 = "\n \"#()*+/1:=[]abcdefghijklmnopqrstuvwxyz"
lookup2 = "ABCDEFGHIJKLMNOPQRSTabcdefghijklmnopqrst"

decoded_text = ""
prev = 0

for char in ciphertext:
    cur = lookup2.index(char)
    decoded_text += lookup1[(cur + prev) % 40]
    prev = (cur + prev) % 40

sys.stdout.write(decoded_text)

Running this code gives another program.  

#asciiorder
#fortychars
#selfinput
#pythontwo

chars = ""
from fileinput import input
for line in input():
    chars += line
b = 1 / 1

for i in range(len(chars)):
    if i == b * b * b:
        print chars[i] #prints
        b += 1 / 1

To integrate this into our decoder, append the cubic sequence extraction logic to the first decoder. Process the decoded text to extract the flag.

import sys

ciphertext = "DLSeGAGDgBNJDQJDCFSFnRBIDjgHoDFCFtHDgJpiHtGDmMAQFnRBJKkBAsTMrsPSDDnEFCFtIbEDtDCIbFCFtHTJDKerFldbFObFCFtLBFkBAAAPFnRBJGEkerFlcPgKkImHnIlATJDKbTbFOkdNnsgbnJRMFnRBNAFkBAAAbrcbTK
AkOgFpOgFpOpkBAAAAAAAiClFGIPFnRBaKliCgClFGtIBAAAAAAAOgGEkImHnIl"

lookup1 = "\n \"#()*+/1:=[]abcdefghijklmnopqrstuvwxyz"
lookup2 = "ABCDEFGHIJKLMNOPQRSTabcdefghijklmnopqrst"

chars = ""
b = 1

for char in ciphertext:
    cur = lookup2.index(char)
    prev = lookup1.index(chars[-1]) if chars else 0
    chars += lookup1[(cur + prev) % 40]

message = ''
for i in range(len(chars)):
    if i == b * b * b:
        b += 1 / 1
        message += chars[i]

print("picoCTF{"+message+"}")

Flag: picoCTF{adlibs} 

Resources: For more details, check out the write-up: [Medium Write-Up](https://medium.com/@mastercode112/picoctf-2024-writeup-by-mastercode-d9eae91698a1).
