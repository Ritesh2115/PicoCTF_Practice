PROBLEM STATEMENT : Can you make sense of this code and decrypt the given encrypted file? You can find the encrypted file and the code file in the provided links. Letâ€™s analyze them to uncover the flag!  

HINT 1: To solve this, you need to reverse-engineer the encryption algorithm and write a function to decode the content.  

EXTRA POINT : The encryption algorithm used in this challenge is Diffie-Hellman.  

The "flag_info" file contains:  
plaintext
a = 94  
b = 21  
cipher is: [131553, 993956, 964722, 1359381, 43851, 1169360, 950105, 321574, 1081658, 613914, 0, 1213211, 306957, 73085, 993956, 0, 321574, 1257062, 14617, 906254, 350808, 394659,  
87702, 87702, 248489, 87702, 380042, 745467, 467744, 716233, 380042, 102319, 175404, 248489]
  
The code file contains a Python script for encryption, which includes functions like "generator", "encrypt", and "dynamic_xor_encrypt". Here's the important part:  

1. "generator": Generates a key using the formula: g^x mod p
2. "encrypt": Multiplies the ASCII value of each character by the key and a constant (311).
3. "dynamic_xor_encrypt": Encrypts text using a reversible XOR operation with a given key.

To decrypt the file, we reverse the encryption process step by step.  
def generator(g, x, p):
    return pow(g, x, p)

def decrypt(cipher, key):
    plain = ""
    for num in cipher:
        plain += chr(int(num / key / 311))
    return plain

def dynamic_xor_decrypt(semi_cipher, text_key):
    flag = ""
    key_length = len(text_key)
    for i, char in enumerate(semi_cipher):
        flag += chr(ord(char) ^ ord(text_key[i % key_length]))
    return flag

def test(cipher, text_key):
    p = 97
    g = 31
    a = 94
    b = 21
    shared_key = generator(generator(g, b, p), a, p)
    semi_cipher = decrypt(cipher, shared_key)
    flag = dynamic_xor_decrypt(semi_cipher, text_key)
    print(f'Flag is: {flag[::-1]}')

if __name__ == "__main__":
    cipher = [131553, 993956, 964722, 1359381, 43851, 1169360, 950105, 321574, 1081658, 613914, 0, 1213211, 306957, 73085, 993956, 0, 321574, 1257062, 14617, 906254, 350808, 394659,  
              87702, 87702, 248489, 87702, 380042, 745467, 467744, 716233, 380042, 102319, 175404, 248489]
    test(cipher, "trudeau")

The condition "key == b_key" was redundant because both keys are guaranteed to match if "p" and "g" are prime. The semi-cipher was stored in reverse, so we iterated the loop in the correct
order during decryption. The final flag was reversed, so we corrected it before printing.  

Flag:  
picoCTF{custom_d2cr0pt6d_8b41f976}
