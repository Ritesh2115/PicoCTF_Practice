PROBLEM STATEMENT : Can you get sense of this code file and write the function that will decode the given encrypted file content. Find the encrypted file here flag_info and code file
might be good to analyze and get the flag.
HINT 1 : Understanding encryption algorithm to come up with decryption algorithm.

EXTRA POINT : The algorithm used for encryption in this question Diffie-Hellman.

The flag_info files contain :
a = 94
b = 21
cipher is: [131553, 993956, 964722, 1359381, 43851, 1169360, 950105, 321574, 1081658, 613914, 0, 1213211, 306957, 73085, 993956, 0, 321574, 1257062, 14617, 906254, 350808, 394659, 
              87702, 87702, 248489, 87702, 380042, 745467, 467744, 716233, 380042, 102319, 175404, 248489]

The code file contains a python code : 

from random import randint
import sys

def generator(g, x, p):
    return pow(g, x) % p

def encrypt(plaintext, key):
    cipher = []
    for char in plaintext:
        cipher.append(((ord(char) * key * 311)))
    return cipher

def is_prime(p):
    v = 0
    for i in range(2, p + 1):
        if p % i == 0:
            v = v + 1
    if v > 1:
        return False
    else:
        return True

def dynamic_xor_encrypt(plaintext, text_key):
    cipher_text = ""
    key_length = len(text_key)
    for i, char in enumerate(plaintext[::-1]):
        key_char = text_key[i % key_length]
        encrypted_char = chr(ord(char) ^ ord(key_char))
        cipher_text += encrypted_char
    return cipher_text

def test(plain_text, text_key):
    p = 97
    g = 31
    if not is_prime(p) and not is_prime(g):
        print("Enter prime numbers")
        return
    a = randint(p-10, p)
    b = randint(g-10, g)
    print(f"a = {a}")
    print(f"b = {b}")
    u = generator(g, a, p)
    v = generator(g, b, p)
    key = generator(v, a, p)
    b_key = generator(u, b, p)
    shared_key = None
    if key == b_key:
        shared_key = key
    else:
        print("Invalid key")
        return
    semi_cipher = dynamic_xor_encrypt(plain_text, text_key)
    cipher = encrypt(semi_cipher, shared_key)
    print(f'cipher is: {cipher}')

if __name__ == "__main__":
    message = sys.argv[1]
    test(message, "trudeau")

So we have to reverse engineer the code to decrypt the flag.

def generator(g, x, p):
    return pow(g, x) % p

def decrypt(cipher, key):
    plain = ""
    for num in cipher :
        plain += chr(int(num/key/311))
    return plain

def dynamic_xor_decrypt(semi_cipher, text_key):
    flag = ""
    key_length = len(text_key)
    for i, char in enumerate(semi_cipher):
        flag += chr(ord(char) ^ ord(text_key[i % key_length]))
    return flag

def test(cipher, text_key):
    p = 97
    g = 31
    a = 94
    b = 21
    semi_cipher = decrypt(cipher, generator(generator(g, b, p), a, p))
    flag = dynamic_xor_decrypt(semi_cipher, text_key)
    print(f'Flag is: {flag[::-1]}')

if __name__ == "__main__":
    message = [131553, 993956, 964722, 1359381, 43851, 1169360, 950105, 321574, 1081658, 613914, 0, 1213211, 306957, 73085, 993956, 0, 321574, 1257062, 14617, 906254, 350808, 394659, 
                87702, 87702, 248489, 87702, 380042, 745467, 467744, 716233, 380042, 102319, 175404, 248489]
    test(message, "trudeau")

After studying the encryption method, I realized that key and b_key are always equal if p and g are prime, while a and b can be random numbers. Therefore, the key == b_key condition was 
unnecessary. I simplified the code by directly assigning the shared key when calling the function, thereby reducing the number of variables. In the dynamic_xor_decrypt function, I
iterated through the loop in a forward manner because the semi_cipher contained the decoded semi_cipher (derived from cipher) in reverse order (refer to the custom_encryption.py file).
Upon printing the flag, I noticed it was reversed, so I updated the code to print the flag in the correct order. :)

FLAG : picoCTF{custom_d2cr0pt6d_8b41f976}
